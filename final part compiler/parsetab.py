
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftANDORnonassocEQUALS_EQUALSNOT_EQUALSnonassocGREATERLESSGREATER_EQUALLESS_EQUALNOT_UNARYleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSAND COLON COMMA CREATEARRAY DECL DEF DIVIDE ELSE EQUALS EQUALS_EQUALS FALSE FLOAT GETARRAY GREATER GREATER_EQUAL IF INT LBRACE LBRACKET LESS LESS_EQUAL LPAREN MINUS MOD NOT_EQUALS NOT_UNARY OR PLUS PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING TIMES TRUE TYPE_BOOLEAN TYPE_FLOAT TYPE_INT TYPE_STRING TYPE_VOID VARIABLE WHILEprogram_helper : declaration program_helper\n\t                  | definition program_helper\n\t                  | declaration\n\t                  | definitionprogram : program_helperdeclaration : DECL VARIABLE LPAREN arguments RPAREN type\n\t\t\t\t   | DECL VARIABLE LPAREN empty_args RPAREN typedefinition : DEF VARIABLE LPAREN arguments RPAREN type LBRACE def_block  return RBRACE\n\t              | DEF VARIABLE LPAREN empty_args RPAREN type LBRACE def_block return RBRACEtype : COLON TYPE_INT\n\t\t\t| COLON TYPE_FLOAT\n\t\t\t| COLON TYPE_VOID\n\t\t\t| COLON TYPE_STRING\n\t\t\t| COLON TYPE_BOOLEANempty : empty_args : empty_args_inv : args : VARIABLE type COMMA args\n\t        | VARIABLE typearguments : argsargs_inv : expression COMMA args_inv\n\t            | expressionarguments_funinvocation : args_inv\n\t                           | empty_args_invstats : statment\n\t         | statment statsstatments : statsdef_stats : def_statment\n\t             | def_statment def_statsdef_statments : def_statsdef_statment : statment_expression\n\t\t\t\t    | if\n\t\t\t\t    | if_else\n\t\t\t\t    | while\n\t\t\t\t    | var_decl\n\t\t\t\t    | var_assign\n\t\t\t\t    | array_decl\n\t\t\t\t    | array_assign\n\t\t\t\t    | printblock : LBRACE statments RBRACE\n\t         | LBRACE empty RBRACEdef_block : def_statments\n\t             | emptystatment : return\n\t\t\t\t| statment_expression\n\t\t\t\t| if\n\t\t\t\t| if_else\n\t\t\t\t| while\n\t\t\t\t| var_decl\n\t\t\t\t| var_assign\n\t\t\t\t| array_decl\n\t\t\t\t| array_assign\n\t\t\t\t| printprint_helper : COMMA expression\n\t                | COMMA expression print_helperprint : PRINT LPAREN STRING print_helper RPAREN SEMICOLON\n\t         | PRINT LPAREN STRING empty RPAREN SEMICOLONreturn : RETURN empty_args SEMICOLON\n\t\t\t  | RETURN expression SEMICOLONstatment_expression : expression SEMICOLONif : IF expression blockif_else : IF expression block ELSE blockwhile : WHILE expression blockvar_decl : VARIABLE type EQUALS expression SEMICOLONcreate_array : CREATEARRAY LPAREN expression RPARENarray_decl : VARIABLE type LBRACKET expression RBRACKET SEMICOLON\n\t              | VARIABLE type EQUALS create_array SEMICOLONvar_assign : VARIABLE EQUALS expression SEMICOLONarray_assign : VARIABLE LBRACKET expression RBRACKET EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression                 \n                  | expression MOD expression            \n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQUALS_EQUALS expression\n                  | expression NOT_EQUALS expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATER_EQUAL expression\n                  | expression LESS_EQUAL expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : FLOATexpression : INTexpression : STRINGexpression : VARIABLEexpression : TRUE\n\t\t\t\t  | FALSEexpression : NOT_UNARY expressionget_array : GETARRAY LPAREN VARIABLE RPARENexpression : VARIABLE LBRACKET expression RBRACKET\n\t\t\t\t  | get_array LBRACKET expression RBRACKETexpression : VARIABLE LPAREN arguments_funinvocation RPAREN'
    
_lr_action_items = {'DECL':([0,3,4,26,27,28,29,30,31,32,109,131,],[5,5,5,-10,-11,-12,-13,-14,-6,-7,-8,-9,]),'DEF':([0,3,4,26,27,28,29,30,31,32,109,131,],[6,6,6,-10,-11,-12,-13,-14,-6,-7,-8,-9,]),'$end':([1,2,3,4,7,8,26,27,28,29,30,31,32,109,131,],[0,-5,-3,-4,-1,-2,-10,-11,-12,-13,-14,-6,-7,-8,-9,]),'VARIABLE':([5,6,11,12,25,36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[9,10,13,13,13,38,38,73,38,-31,-32,-33,-34,-35,-36,-37,-38,-39,73,73,73,73,73,73,73,73,-60,73,73,73,73,73,73,73,73,73,73,73,73,73,73,130,73,73,73,-61,38,-63,-68,73,-58,-59,38,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,73,-64,-67,73,73,-62,-40,-41,-66,-56,-57,-69,]),'LPAREN':([9,10,36,37,38,39,44,45,46,47,48,49,50,51,52,53,55,56,57,59,64,66,69,70,71,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,134,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[11,12,39,39,71,39,39,-31,-32,-33,-34,-35,-36,-37,-38,-39,39,39,93,39,39,97,39,39,39,71,39,-60,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-61,39,-63,165,-68,39,-58,-59,39,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,39,-64,-67,39,39,-62,-40,-41,-66,-56,-57,-69,]),'RPAREN':([11,12,14,15,16,17,18,19,26,27,28,29,30,35,58,60,61,62,63,71,72,73,94,95,103,104,105,106,107,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,138,158,159,161,168,169,176,177,182,],[-16,-16,21,22,-20,23,24,-19,-10,-11,-12,-13,-14,-18,-87,-85,-86,-89,-90,-17,107,-88,-83,-91,138,-23,-24,-22,-84,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-15,162,-95,174,175,-94,-21,-93,-54,183,-55,]),'COLON':([13,21,22,23,24,38,],[20,20,20,20,20,20,]),'COMMA':([19,26,27,28,29,30,58,60,61,62,63,73,94,95,106,107,112,113,114,115,116,117,118,119,120,121,122,123,124,128,138,161,169,176,],[25,-10,-11,-12,-13,-14,-87,-85,-86,-89,-90,-88,-83,-91,139,-84,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,160,-95,-94,-93,160,]),'TYPE_INT':([20,],[26,]),'TYPE_FLOAT':([20,],[27,]),'TYPE_VOID':([20,],[28,]),'TYPE_STRING':([20,],[29,]),'TYPE_BOOLEAN':([20,],[30,]),'LBRACE':([26,27,28,29,30,33,34,58,60,61,62,63,73,91,92,94,95,107,112,113,114,115,116,117,118,119,120,121,122,123,124,138,143,161,169,],[-10,-11,-12,-13,-14,36,37,-87,-85,-86,-89,-90,-88,126,126,-83,-91,-84,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-95,126,-94,-93,]),'EQUALS':([26,27,28,29,30,38,68,137,],[-10,-11,-12,-13,-14,69,99,167,]),'LBRACKET':([26,27,28,29,30,38,65,68,73,162,],[-10,-11,-12,-13,-14,70,96,100,108,-92,]),'RETURN':([36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,67,76,77,125,126,127,136,141,142,147,148,149,150,151,152,153,154,155,156,157,163,164,170,171,172,178,180,181,184,],[-15,-15,75,-42,-43,-30,-28,-31,-32,-33,-34,-35,-36,-37,-38,-39,75,-29,-60,-61,75,-63,-68,-58,-59,75,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-64,-67,-62,-40,-41,-66,-56,-57,-69,]),'IF':([36,37,44,45,46,47,48,49,50,51,52,53,77,125,126,127,136,141,142,147,148,149,150,151,152,153,154,155,156,157,163,164,170,171,172,178,180,181,184,],[55,55,55,-31,-32,-33,-34,-35,-36,-37,-38,-39,-60,-61,55,-63,-68,-58,-59,55,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-64,-67,-62,-40,-41,-66,-56,-57,-69,]),'WHILE':([36,37,44,45,46,47,48,49,50,51,52,53,77,125,126,127,136,141,142,147,148,149,150,151,152,153,154,155,156,157,163,164,170,171,172,178,180,181,184,],[56,56,56,-31,-32,-33,-34,-35,-36,-37,-38,-39,-60,-61,56,-63,-68,-58,-59,56,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-64,-67,-62,-40,-41,-66,-56,-57,-69,]),'PRINT':([36,37,44,45,46,47,48,49,50,51,52,53,77,125,126,127,136,141,142,147,148,149,150,151,152,153,154,155,156,157,163,164,170,171,172,178,180,181,184,],[57,57,57,-31,-32,-33,-34,-35,-36,-37,-38,-39,-60,-61,57,-63,-68,-58,-59,57,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-64,-67,-62,-40,-41,-66,-56,-57,-69,]),'MINUS':([36,37,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,69,70,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,99,100,101,102,106,107,108,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,132,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,156,157,160,161,163,164,165,167,169,170,171,172,176,177,178,179,180,181,184,],[59,59,-88,59,59,-31,-32,-33,-34,-35,-36,-37,-38,-39,79,59,59,-87,59,-85,-86,-89,-90,59,59,59,59,79,-88,59,-60,59,59,59,59,59,59,59,59,59,59,59,59,59,79,79,-83,79,59,59,59,79,79,79,-84,59,79,-70,-71,-72,-73,-74,79,79,79,79,79,79,79,79,-61,59,-63,79,79,79,-68,-93,-95,59,79,-58,-59,59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,59,-94,-64,-67,59,59,-93,-62,-40,-41,79,79,-66,79,-56,-57,-69,]),'FLOAT':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[60,60,60,60,-31,-32,-33,-34,-35,-36,-37,-38,-39,60,60,60,60,60,60,60,60,-60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-61,60,-63,-68,60,-58,-59,60,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,60,-64,-67,60,60,-62,-40,-41,-66,-56,-57,-69,]),'INT':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[61,61,61,61,-31,-32,-33,-34,-35,-36,-37,-38,-39,61,61,61,61,61,61,61,61,-60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-61,61,-63,-68,61,-58,-59,61,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,61,-64,-67,61,61,-62,-40,-41,-66,-56,-57,-69,]),'STRING':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[58,58,58,58,-31,-32,-33,-34,-35,-36,-37,-38,-39,58,58,58,58,58,58,58,58,-60,58,58,58,58,58,58,58,58,58,58,58,58,58,128,58,58,58,58,-61,58,-63,-68,58,-58,-59,58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,58,-64,-67,58,58,-62,-40,-41,-66,-56,-57,-69,]),'TRUE':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[62,62,62,62,-31,-32,-33,-34,-35,-36,-37,-38,-39,62,62,62,62,62,62,62,62,-60,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-61,62,-63,-68,62,-58,-59,62,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,62,-64,-67,62,62,-62,-40,-41,-66,-56,-57,-69,]),'FALSE':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[63,63,63,63,-31,-32,-33,-34,-35,-36,-37,-38,-39,63,63,63,63,63,63,63,63,-60,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-61,63,-63,-68,63,-58,-59,63,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,63,-64,-67,63,63,-62,-40,-41,-66,-56,-57,-69,]),'NOT_UNARY':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[64,64,64,64,-31,-32,-33,-34,-35,-36,-37,-38,-39,64,64,64,64,64,64,64,64,-60,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-61,64,-63,-68,64,-58,-59,64,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,64,-64,-67,64,64,-62,-40,-41,-66,-56,-57,-69,]),'GETARRAY':([36,37,39,44,45,46,47,48,49,50,51,52,53,55,56,59,64,69,70,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,125,126,127,136,139,141,142,147,148,149,150,151,152,153,154,155,156,157,160,163,164,165,167,170,171,172,178,180,181,184,],[66,66,66,66,-31,-32,-33,-34,-35,-36,-37,-38,-39,66,66,66,66,66,66,66,66,-60,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-61,66,-63,-68,66,-58,-59,66,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,66,-64,-67,66,66,-62,-40,-41,-66,-56,-57,-69,]),'SEMICOLON':([38,54,58,60,61,62,63,73,75,94,95,101,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,133,137,138,161,166,169,174,175,179,183,],[-88,77,-87,-85,-86,-89,-90,-88,-16,-83,-91,136,-84,141,142,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,163,164,-93,-95,-94,178,-93,180,181,184,-65,]),'PLUS':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,78,-87,-85,-86,-89,-90,78,-88,78,78,-83,78,78,78,78,-84,78,-70,-71,-72,-73,-74,78,78,78,78,78,78,78,78,78,78,78,-93,-95,78,-94,-93,78,78,78,]),'TIMES':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,80,-87,-85,-86,-89,-90,80,-88,80,80,-83,80,80,80,80,-84,80,80,80,-72,-73,-74,80,80,80,80,80,80,80,80,80,80,80,-93,-95,80,-94,-93,80,80,80,]),'DIVIDE':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,81,-87,-85,-86,-89,-90,81,-88,81,81,-83,81,81,81,81,-84,81,81,81,-72,-73,-74,81,81,81,81,81,81,81,81,81,81,81,-93,-95,81,-94,-93,81,81,81,]),'MOD':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,82,-87,-85,-86,-89,-90,82,-88,82,82,-83,82,82,82,82,-84,82,82,82,-72,-73,-74,82,82,82,82,82,82,82,82,82,82,82,-93,-95,82,-94,-93,82,82,82,]),'AND':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,83,-87,-85,-86,-89,-90,83,-88,83,83,-83,-91,83,83,83,-84,83,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,83,83,83,-93,-95,83,-94,-93,83,83,83,]),'OR':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,84,-87,-85,-86,-89,-90,84,-88,84,84,-83,-91,84,84,84,-84,84,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,84,84,84,-93,-95,84,-94,-93,84,84,84,]),'EQUALS_EQUALS':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,85,-87,-85,-86,-89,-90,85,-88,85,85,-83,-91,85,85,85,-84,85,-70,-71,-72,-73,-74,85,85,None,None,-79,-80,-81,-82,85,85,85,-93,-95,85,-94,-93,85,85,85,]),'NOT_EQUALS':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,86,-87,-85,-86,-89,-90,86,-88,86,86,-83,-91,86,86,86,-84,86,-70,-71,-72,-73,-74,86,86,None,None,-79,-80,-81,-82,86,86,86,-93,-95,86,-94,-93,86,86,86,]),'GREATER':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,87,-87,-85,-86,-89,-90,87,-88,87,87,-83,None,87,87,87,-84,87,-70,-71,-72,-73,-74,87,87,87,87,None,None,None,None,87,87,87,-93,-95,87,-94,-93,87,87,87,]),'LESS':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,88,-87,-85,-86,-89,-90,88,-88,88,88,-83,None,88,88,88,-84,88,-70,-71,-72,-73,-74,88,88,88,88,None,None,None,None,88,88,88,-93,-95,88,-94,-93,88,88,88,]),'GREATER_EQUAL':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,89,-87,-85,-86,-89,-90,89,-88,89,89,-83,None,89,89,89,-84,89,-70,-71,-72,-73,-74,89,89,89,89,None,None,None,None,89,89,89,-93,-95,89,-94,-93,89,89,89,]),'LESS_EQUAL':([38,54,58,60,61,62,63,72,73,91,92,94,95,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,137,138,140,161,169,176,177,179,],[-88,90,-87,-85,-86,-89,-90,90,-88,90,90,-83,None,90,90,90,-84,90,-70,-71,-72,-73,-74,90,90,90,90,None,None,None,None,90,90,90,-93,-95,90,-94,-93,90,90,90,]),'RBRACKET':([58,60,61,62,63,73,94,95,102,107,112,113,114,115,116,117,118,119,120,121,122,123,124,129,135,138,140,161,169,],[-87,-85,-86,-89,-90,-88,-83,-91,137,-84,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,161,166,-95,169,-94,-93,]),'RBRACE':([74,77,98,125,126,127,136,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,170,171,172,173,178,180,181,184,],[109,-60,131,-61,-15,-63,-68,-58,-59,171,172,-27,-25,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-64,-67,-62,-40,-41,-26,-66,-56,-57,-69,]),'CREATEARRAY':([99,],[134,]),'ELSE':([125,171,172,],[143,-40,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_helper':([0,3,4,],[2,7,8,]),'declaration':([0,3,4,],[3,3,3,]),'definition':([0,3,4,],[4,4,4,]),'arguments':([11,12,],[14,17,]),'empty_args':([11,12,75,],[15,18,110,]),'args':([11,12,25,],[16,16,35,]),'type':([13,21,22,23,24,38,],[19,31,32,33,34,68,]),'def_block':([36,37,],[40,67,]),'def_statments':([36,37,],[41,41,]),'empty':([36,37,126,128,],[42,42,145,159,]),'def_stats':([36,37,44,],[43,43,76,]),'def_statment':([36,37,44,],[44,44,44,]),'statment_expression':([36,37,44,126,147,],[45,45,45,149,149,]),'if':([36,37,44,126,147,],[46,46,46,150,150,]),'if_else':([36,37,44,126,147,],[47,47,47,151,151,]),'while':([36,37,44,126,147,],[48,48,48,152,152,]),'var_decl':([36,37,44,126,147,],[49,49,49,153,153,]),'var_assign':([36,37,44,126,147,],[50,50,50,154,154,]),'array_decl':([36,37,44,126,147,],[51,51,51,155,155,]),'array_assign':([36,37,44,126,147,],[52,52,52,156,156,]),'print':([36,37,44,126,147,],[53,53,53,157,157,]),'expression':([36,37,39,44,55,56,59,64,69,70,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,126,139,147,160,165,167,],[54,54,72,54,91,92,94,95,101,102,106,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,135,140,54,106,54,176,177,179,]),'get_array':([36,37,39,44,55,56,59,64,69,70,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,96,99,100,108,126,139,147,160,165,167,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'return':([40,67,126,147,],[74,98,148,148,]),'arguments_funinvocation':([71,],[103,]),'args_inv':([71,139,],[104,168,]),'empty_args_inv':([71,],[105,]),'block':([91,92,143,],[125,127,170,]),'create_array':([99,],[133,]),'statments':([126,],[144,]),'stats':([126,147,],[146,173,]),'statment':([126,147,],[147,147,]),'print_helper':([128,176,],[158,182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program_helper -> declaration program_helper','program_helper',2,'p_program_helper','parser.py',147),
  ('program_helper -> definition program_helper','program_helper',2,'p_program_helper','parser.py',148),
  ('program_helper -> declaration','program_helper',1,'p_program_helper','parser.py',149),
  ('program_helper -> definition','program_helper',1,'p_program_helper','parser.py',150),
  ('program -> program_helper','program',1,'p_program','parser.py',157),
  ('declaration -> DECL VARIABLE LPAREN arguments RPAREN type','declaration',6,'p_declaration','parser.py',161),
  ('declaration -> DECL VARIABLE LPAREN empty_args RPAREN type','declaration',6,'p_declaration','parser.py',162),
  ('definition -> DEF VARIABLE LPAREN arguments RPAREN type LBRACE def_block return RBRACE','definition',10,'p_definition','parser.py',169),
  ('definition -> DEF VARIABLE LPAREN empty_args RPAREN type LBRACE def_block return RBRACE','definition',10,'p_definition','parser.py',170),
  ('type -> COLON TYPE_INT','type',2,'p_type','parser.py',175),
  ('type -> COLON TYPE_FLOAT','type',2,'p_type','parser.py',176),
  ('type -> COLON TYPE_VOID','type',2,'p_type','parser.py',177),
  ('type -> COLON TYPE_STRING','type',2,'p_type','parser.py',178),
  ('type -> COLON TYPE_BOOLEAN','type',2,'p_type','parser.py',179),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',183),
  ('empty_args -> <empty>','empty_args',0,'p_empty_args','parser.py',186),
  ('empty_args_inv -> <empty>','empty_args_inv',0,'p_empty_args_inv','parser.py',190),
  ('args -> VARIABLE type COMMA args','args',4,'p_argument_helper','parser.py',194),
  ('args -> VARIABLE type','args',2,'p_argument_helper','parser.py',195),
  ('arguments -> args','arguments',1,'p_arguments','parser.py',202),
  ('args_inv -> expression COMMA args_inv','args_inv',3,'p_arguments_funinvocation_helper','parser.py',207),
  ('args_inv -> expression','args_inv',1,'p_arguments_funinvocation_helper','parser.py',208),
  ('arguments_funinvocation -> args_inv','arguments_funinvocation',1,'p_arguments_funinvocation','parser.py',215),
  ('arguments_funinvocation -> empty_args_inv','arguments_funinvocation',1,'p_arguments_funinvocation','parser.py',216),
  ('stats -> statment','stats',1,'p_statment_helper','parser.py',221),
  ('stats -> statment stats','stats',2,'p_statment_helper','parser.py',222),
  ('statments -> stats','statments',1,'p_statments','parser.py',229),
  ('def_stats -> def_statment','def_stats',1,'p_def_statment_helper','parser.py',234),
  ('def_stats -> def_statment def_stats','def_stats',2,'p_def_statment_helper','parser.py',235),
  ('def_statments -> def_stats','def_statments',1,'p_def_statments','parser.py',242),
  ('def_statment -> statment_expression','def_statment',1,'p_def_statment','parser.py',247),
  ('def_statment -> if','def_statment',1,'p_def_statment','parser.py',248),
  ('def_statment -> if_else','def_statment',1,'p_def_statment','parser.py',249),
  ('def_statment -> while','def_statment',1,'p_def_statment','parser.py',250),
  ('def_statment -> var_decl','def_statment',1,'p_def_statment','parser.py',251),
  ('def_statment -> var_assign','def_statment',1,'p_def_statment','parser.py',252),
  ('def_statment -> array_decl','def_statment',1,'p_def_statment','parser.py',253),
  ('def_statment -> array_assign','def_statment',1,'p_def_statment','parser.py',254),
  ('def_statment -> print','def_statment',1,'p_def_statment','parser.py',255),
  ('block -> LBRACE statments RBRACE','block',3,'p_block','parser.py',259),
  ('block -> LBRACE empty RBRACE','block',3,'p_block','parser.py',260),
  ('def_block -> def_statments','def_block',1,'p_def_block','parser.py',265),
  ('def_block -> empty','def_block',1,'p_def_block','parser.py',266),
  ('statment -> return','statment',1,'p_statment','parser.py',270),
  ('statment -> statment_expression','statment',1,'p_statment','parser.py',271),
  ('statment -> if','statment',1,'p_statment','parser.py',272),
  ('statment -> if_else','statment',1,'p_statment','parser.py',273),
  ('statment -> while','statment',1,'p_statment','parser.py',274),
  ('statment -> var_decl','statment',1,'p_statment','parser.py',275),
  ('statment -> var_assign','statment',1,'p_statment','parser.py',276),
  ('statment -> array_decl','statment',1,'p_statment','parser.py',277),
  ('statment -> array_assign','statment',1,'p_statment','parser.py',278),
  ('statment -> print','statment',1,'p_statment','parser.py',279),
  ('print_helper -> COMMA expression','print_helper',2,'p_print_helper','parser.py',283),
  ('print_helper -> COMMA expression print_helper','print_helper',3,'p_print_helper','parser.py',284),
  ('print -> PRINT LPAREN STRING print_helper RPAREN SEMICOLON','print',6,'p_statment_print','parser.py',291),
  ('print -> PRINT LPAREN STRING empty RPAREN SEMICOLON','print',6,'p_statment_print','parser.py',292),
  ('return -> RETURN empty_args SEMICOLON','return',3,'p_statment_return','parser.py',299),
  ('return -> RETURN expression SEMICOLON','return',3,'p_statment_return','parser.py',300),
  ('statment_expression -> expression SEMICOLON','statment_expression',2,'p_statment_expression','parser.py',307),
  ('if -> IF expression block','if',3,'p_statment_if','parser.py',311),
  ('if_else -> IF expression block ELSE block','if_else',5,'p_statment_if_else','parser.py',315),
  ('while -> WHILE expression block','while',3,'p_statment_while','parser.py',319),
  ('var_decl -> VARIABLE type EQUALS expression SEMICOLON','var_decl',5,'p_statment_vardecl','parser.py',323),
  ('create_array -> CREATEARRAY LPAREN expression RPAREN','create_array',4,'p_create_array','parser.py',327),
  ('array_decl -> VARIABLE type LBRACKET expression RBRACKET SEMICOLON','array_decl',6,'p_statment_arraydecl','parser.py',331),
  ('array_decl -> VARIABLE type EQUALS create_array SEMICOLON','array_decl',5,'p_statment_arraydecl','parser.py',332),
  ('var_assign -> VARIABLE EQUALS expression SEMICOLON','var_assign',4,'p_statment_varassign','parser.py',336),
  ('array_assign -> VARIABLE LBRACKET expression RBRACKET EQUALS expression SEMICOLON','array_assign',7,'p_statment_arrayassign','parser.py',340),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',344),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',345),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',346),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',347),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',348),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',349),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',350),
  ('expression -> expression EQUALS_EQUALS expression','expression',3,'p_expression_binop','parser.py',351),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression_binop','parser.py',352),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',353),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',354),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binop','parser.py',355),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binop','parser.py',356),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',360),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',364),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',368),
  ('expression -> INT','expression',1,'p_expression_int','parser.py',372),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',376),
  ('expression -> VARIABLE','expression',1,'p_expression_var','parser.py',380),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',384),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',385),
  ('expression -> NOT_UNARY expression','expression',2,'p_expression_notunary','parser.py',389),
  ('get_array -> GETARRAY LPAREN VARIABLE RPAREN','get_array',4,'p_get_array','parser.py',393),
  ('expression -> VARIABLE LBRACKET expression RBRACKET','expression',4,'p_expression_index','parser.py',397),
  ('expression -> get_array LBRACKET expression RBRACKET','expression',4,'p_expression_index','parser.py',398),
  ('expression -> VARIABLE LPAREN arguments_funinvocation RPAREN','expression',4,'p_expression_funinvocation','parser.py',405),
]
